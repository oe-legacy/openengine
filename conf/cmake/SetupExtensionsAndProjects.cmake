
SET(OE_VISITOR_HEADER_EXPANSION "")
SET(OE_VISITOR_HEADER_DECLARATION_EXPANSION "")
SET(OE_VISITOR_IMPL_EXPANSION "")
SET(OE_VISITOR_IMPL_INCLUDE_EXPANSION "")

SET(OE_AUTOGEN_HEADER_TPL 
"// -------------------------------------------------------------------
// NOTICE:
// This file has been auto generated by the CMake system.
// All modifications should be done in \@TEMPLATE_FILE_NAME\@
// -------------------------------------------------------------------
// ALL MODIFICATIONS TO THIS FILE WILL BE LOST NEXT TIME YOU REBUILD.
// -------------------------------------------------------------------")

# Find all sub directories in the extensions directory
FILE(GLOB EXTENSIONS_SUB_DIRECTORIES RELATIVE
     ${OE_EXTENSIONS_DIR} "${OE_EXTENSIONS_DIR}/*")

# If any extensions are found include them
FOREACH(SUB_DIR ${EXTENSIONS_SUB_DIRECTORIES})
  SET(FULL_SUB_DIR "${OE_EXTENSIONS_DIR}/${SUB_DIR}")
  IF(IS_DIRECTORY ${FULL_SUB_DIR})

    MESSAGE(STATUS "Linking in extension: ${SUB_DIR}")
    INCLUDE_DIRECTORIES(${FULL_SUB_DIR})
    SUBDIRS(${FULL_SUB_DIR})

    # Invoke setup file if present
    SET(SETUP_FILE "${FULL_SUB_DIR}/Setup.cmake")
    IF(EXISTS ${SETUP_FILE})
      SET(OE_CURRENT_EXTENSION_DIR "${FULL_SUB_DIR}")
      INCLUDE(${SETUP_FILE})
      SET(OE_CURRENT_EXTENSION_DIR "")
    ENDIF(EXISTS ${SETUP_FILE})

    # Search for visitor expansions
    SET(EXP_FILE "${FULL_SUB_DIR}/VisitorExpansion.txt")
    IF(EXISTS ${EXP_FILE})

      IF(OE_DEBUG_CMAKE)
      MESSAGE(STATUS "Found expansion file ${EXP_FILE}")
      ENDIF(OE_DEBUG_CMAKE)

      FILE(READ ${EXP_FILE} SUB_VISIT_EXP)

      IF(OE_DEBUG_CMAKE)
      MESSAGE(STATUS "Expansion file content: ${SUB_VISIT_EXP}")
      ENDIF(OE_DEBUG_CMAKE)

      IF(SUB_VISIT_EXP)
        STRING(REPLACE "\n" " " SUB_VISIT_EXP ${SUB_VISIT_EXP})

        IF(OE_DEBUG_CMAKE)
        MESSAGE(STATUS "Doing line seperation on file expansion file")
        ENDIF(OE_DEBUG_CMAKE)

      ENDIF(SUB_VISIT_EXP)

      SEPARATE_ARGUMENTS(SUB_VISIT_EXP)
      FOREACH(SUB_EXP ${SUB_VISIT_EXP})

        IF(OE_DEBUG_CMAKE)
        MESSAGE(STATUS "Performing sanity checks on line: ${SUB_EXP}")
        ENDIF(OE_DEBUG_CMAKE)

        # check variables
        STRING(REGEX MATCH "(([a-zA-Z][a-zA-Z0-9]*/)*[a-zA-Z][a-zA-Z0-9]*)" EXP ${SUB_EXP})
        STRING(REGEX REPLACE "([a-zA-Z][a-zA-Z0-9]*/)*([a-zA-Z][a-zA-Z0-9]*)" "\\2" SUB_EXP_NODE ${SUB_EXP})
        FIND_FILE(NODE_HEADER_FILE "${SUB_EXP}.h" ${FULL_SUB_DIR})
        FIND_FILE(NODE_IMPL_FILE "${SUB_EXP}.cpp" ${FULL_SUB_DIR})

        # check format (Path/SomeNode)
        IF(NOT EXP STREQUAL SUB_EXP)
          MESSAGE(SEND_ERROR "Invalid visitor expansion '${SUB_EXP}' in ${SUB_DIR}/VisitorExpansion.txt")

        # check that files exists
        ELSEIF(NOT NODE_HEADER_FILE)
          MESSAGE(SEND_ERROR "Could not find expansion node header at ${SUB_DIR}/${SUB_EXP}.h")
        ELSEIF(NOT NODE_IMPL_FILE)
          MESSAGE(SEND_ERROR "Could not find expansion node implementation at ${SUB_DIR}/${SUB_EXP}.cpp")

        ELSE(NOT EXP STREQUAL SUB_EXP)

          IF(OE_DEBUG_CMAKE)
          MESSAGE(STATUS "Generating expansion for: ${SUB_EXP_NODE}")
          ENDIF(OE_DEBUG_CMAKE)

	  # generate header and implementation code
          SET(OE_VISITOR_HEADER_DECLARATION_EXPANSION
             "${OE_VISITOR_HEADER_DECLARATION_EXPANSION}class ${SUB_EXP_NODE};\n")
          SET(OE_VISITOR_HEADER_EXPANSION
             "${OE_VISITOR_HEADER_EXPANSION}virtual void Visit${SUB_EXP_NODE}(${SUB_EXP_NODE}* node);\n")
          SET(OE_VISITOR_IMPL_INCLUDE_EXPANSION
             "${OE_VISITOR_IMPL_INCLUDE_EXPANSION}#include <${SUB_EXP}.h>\n")
          SET(OE_VISITOR_IMPL_EXPANSION
             "${OE_VISITOR_IMPL_EXPANSION}//! @see VisitSceneNode\nvoid ISceneNodeVisitor::Visit${SUB_EXP_NODE}(${SUB_EXP_NODE}* node) { DefaultVisitNode(node); }\n")

        ENDIF(NOT EXP STREQUAL SUB_EXP)
  
      ENDFOREACH(SUB_EXP)

    ENDIF(EXISTS ${EXP_FILE})

  ENDIF(IS_DIRECTORY ${FULL_SUB_DIR})
ENDFOREACH(SUB_DIR)

# link in generated code

SET(TEMPLATE_FILE_NAME "ISceneNodeVisitor.h.tpl")
STRING(CONFIGURE ${OE_AUTOGEN_HEADER_TPL} OE_AUTOGEN_HEADER @ONLY)
CONFIGURE_FILE(${OE_SOURCE_DIR}/Scene/ISceneNodeVisitor.h.tpl
               ${OE_SOURCE_DIR}/Scene/ISceneNodeVisitor.h
               @ONLY)

SET(TEMPLATE_FILE_NAME "ISceneNodeVisitor.cpp.tpl")
STRING(CONFIGURE ${OE_AUTOGEN_HEADER_TPL} OE_AUTOGEN_HEADER @ONLY)
CONFIGURE_FILE(${OE_SOURCE_DIR}/Scene/ISceneNodeVisitor.cpp.tpl
               ${OE_SOURCE_DIR}/Scene/ISceneNodeVisitor.cpp
               @ONLY)

# Find all sub directories in the projects directory
FILE(GLOB PROJECTS_SUB_DIRECTORIES RELATIVE ${OE_PROJECTS_DIR} "${OE_PROJECTS_DIR}/*")
FILE(GLOB PROJECTS_SUB_FILES       RELATIVE ${OE_PROJECTS_DIR} "${OE_PROJECTS_DIR}/*.*")
IF(PROJECTS_SUB_FILES)
  LIST(REMOVE_ITEM PROJECTS_SUB_DIRECTORIES ${PROJECTS_SUB_FILES})
ENDIF(PROJECTS_SUB_FILES)

# If any projects are found include them
FOREACH(SUB_DIR ${PROJECTS_SUB_DIRECTORIES})
  MESSAGE(STATUS "Linking in project: ${SUB_DIR}")
  SUBDIRS("${OE_PROJECTS_DIR}/${SUB_DIR}")
ENDFOREACH(SUB_DIR)
